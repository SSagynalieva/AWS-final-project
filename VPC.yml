AWSTemplateFormatVersion: '2010-09-09'
Description: "My final project"

Parameters:
  MyName:
    Type: String
    Default: Saikal Sagynalieva

  VpcCIDR:
    Description: IPv4 CIDR
    Type: String
    Default: 10.0.0.0/16

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro

  PublicSubnet1CIDR:
    Description: Public subnet-1 CIDR 
    Type: String
    Default: 10.0.10.0/24

  PublicSubnet2CIDR:
    Description: Public subnet-2 CIDR
    Type: String
    Default: 10.0.20.0/24

  PrivateSubnet1CIDR:
    Description: Private subnet-1 CIDR
    Type: String
    Default: 10.0.11.0/24

  PrivateSubnet2CIDR:
    Description: Private subnet-2 CIDR
    Type: String
    Default: 10.0.21.0/24

Mappings:
  AMIMapping:
    us-east-1: 
      AmiId: ami-0d7a109bf30624c99
    us-west-2:
      AmiId: ami-07bff6261f14c3a45

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Owner
          Value: !Ref MyName

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Owner
          Value: !Ref MyName

  MyInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyInternetGateway
      VpcId: !Ref MyVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: us-east-1a
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Owner
          Value: !Ref MyName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: us-east-1b
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Owner
          Value: !Ref MyName

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: us-east-1a
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Owner
          Value: !Ref MyName

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: us-east-1b
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Owner
          Value: !Ref MyName

  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Owner
          Value: !Ref MyName

  MyRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  MySubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref MyRouteTable

  MySubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref MyRouteTable

MySubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref MyRouteTable

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref MyVPC
      Tags:
        - Key: Owner
          Value: !Ref MyName

  MySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: My security group description
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Owner
          Value: !Ref MyName

  MyELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyELB
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Owner
          Value: !Ref MyName    
      SecurityGroups:
        - !Ref MySG
  
  MyLaunchTemplate1:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunchTemplate1
      LaunchTemplateData:
        ImageId: !FindInMap [AMIMapping, !Ref "AWS::Region", AmiId]
        DisableApiTermination: true
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref MySG
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Owner
                Value: !Ref MyName
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "<h1>Hello, how are you? $HOSTNAME</h1>" > /var/www/html/index.html


  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: MyAutoScalingGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate1
        Version: !GetAtt MyLaunchTemplate1.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs:
        - !Ref MyTargetGroup
      Tags:
        - Key: Owner
          Value: !Ref MyName
          PropagateAtLaunch: true

  MyTargetTrackingScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref MyAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 30.0
  

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyELB
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup

  MyRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref MyListener
      Conditions:
        - Field: path-pattern
          Values:
            - "/"
      Actions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      Priority: 1 


Outputs:
  MyELB:
    Description: URL of ELB
    Value: !GetAtt MyELB.DNSName
  MyVPC:
    Description:  
    Value: !GetAtt MyVpc. CidrBlock
